<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on 7ing</title>
    <link>https://7ing.github.io/tags/coding/</link>
    <description>Recent content in Coding on 7ing</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Feb 2016 22:38:36 -0800</lastBuildDate>
    
	<atom:link href="https://7ing.github.io/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go-flow</title>
      <link>https://7ing.github.io/article/go-flow/</link>
      <pubDate>Sun, 28 Feb 2016 22:38:36 -0800</pubDate>
      
      <guid>https://7ing.github.io/article/go-flow/</guid>
      <description>A cancellable concurrent pattern for Go programming language Go routine and channels facilitate developers to do concurrent programming. However, it is not easy for a beginner to write bug-free fan-out/fan-in go-routines. Especially when dealing with a complex flow net, make it cancellable is not that straightforward. Consider following situations:
There are 5 ways to exit from a go routine job:
 Successful return void or result(s) Expected error return Unexpected panic / error Job is timeout Job is cancelled from another go routine  There are 2 actions to deal with panic / error :</description>
    </item>
    
  </channel>
</rss>